Команды Git:

Settings:
	git config --global user.name "Your Name"
	git config --global user.email "your_email@whatever.com"
	
	Unix:
	git config --global core.autocrlf input
	git config --global core.safecrlf true
	
	Windows:
	git config --global core.autocrlf true
	git config --global core.safecrlf true

git init - создание репозитория
git checkout -b <имяветки> - создать ветку
	= git branch <имяветки>; checkout <имяветки>
git branch - выводит список веток
git branch -a - выводит все ветки, включая remote
git checkout master - переключиться на ветку master
git merge master - слить текущую ветку с master

git clone repoFrom repoTo - клонирование
git remote - удаленный репозиторий
git remote show origin - подробная информация об удаленном репозитории

git fetch - получить изменения из remote repo. Не сливает с локальными.
git merge origin/master - чтобы слить полученные изменения
git pull - эквивалента двум верхним командам
git branch --track branchName1 origin/branchName2 - добавить ветку которая отслеживает изменения ветки branchName2 в remote repo

git add file

git commit -m "comment"
git commit --amend -m "comment" - коммит вместо последнего коммита

git hist (alias for git log)
git hist --all
git hist --max-count=1 - покажет последний коммит
git cat-file -t <hash> - 
git cat-file -p <hash> - вывод данных последнего коммита
git cat-file -p <treehash> - вывод дерева каталогов

git tag tagName
git tag -d oops - удалить тэг

git checkout file - переключение в версию файла file в репозитории

git revert HEAD - отмена коммита
git reset HEAD file - очищает буферную зону к HEAD
reset:
	- Перепишет текущую ветку, чтобы она указывала на нужный коммит
	- Опционально сбросит буферную зону для соответствия с указанным коммитом
	- Опционально сбросит рабочий каталог для соответствия с указанным коммитом
git reset --hard tagName
	- Параметр --hard указывает, что рабочий каталог должен быть обновлен в соответствии с новым head ветки.

git mv fileName dirName:
	Перемещая файлы с помощью git, мы информируем git о 2 вещах
	- Что файл fileName был удален.
	- Что файл dirName/fileName был создан.

	Эти команды идентичны:
		mkdir lib
		git mv hello.html lib
		
		mkdir lib
		mv hello.html lib
		git add lib/hello.html
		git rm hello.html

ls -C .git - содержание папки git

git rebase master - перебазирование 
	Не используйте перебазирование:
	1)Если ветка является публичной и расшаренной. Переписывание общих веток будет мешать работе других членов команды.
	2)Когда важна точная история коммитов ветки (так как команда rebase переписывает историю коммитов).
	Учитывая приведенные выше рекомендации, я предпочитаю использовать rebase для кратковременных, локальных веток, а 		слияние для веток в публичном репозитории.
